info:
  name: waf_scan
  author: OWASP Nettacker Team
  severity: 3
  description: waf detect
  reference:
  profiles:
    - scan
    - http
    - backup
    - low_severity
    - waf

payloads:
  - library: http
    steps:
      - method: get  ## meant to store the response
        verify: false
        timeout: 3
        cert: ""
        stream: false
        proxies: ""
        headers:
          User-Agent: "{user_agent}"
        allow_redirects: true
        url:
          nettacker_fuzzer:
            input_format: "{{schema}}://{target}:{{ports}}/"
            prefix: ""
            suffix: ""
            interceptors:
            data:
              #urls: fuzzer_function_read_file_as_array('wordlists/admin_wordlist.txt')
              schema:
                - "http"
                - "https"
              ports:
                - 80
                - 443
        response:
          save_to_temp_events_only: valid_request_status
          condition_type: or
          conditions:
            status_code:
              regex: ^[1-5][0-9][0-9]
              reverse: false

      - method: get
        verify: false
        timeout: 3
        cert: ""
        stream: false
        proxies: ""
        headers:
          User-Agent: "{user_agent}"
        allow_redirects: true
        url:
          nettacker_fuzzer:
            input_format: "{{schema}}://{target}:{{ports}}/?{{query}}={{param}}"
            prefix: ""
            suffix: ""
            interceptors:
            data:
              schema:
                - "http"
                - "https"
              ports:
                - 80
                - 443
              query:
                - a
                - q
                - s
                - page
                - file
                - download
                - site
                - date
                - action
              param:
                - <script>alert(\"NETTACKER\");</script> #xss
                - UNION SELECT ALL FROM information_schema AND ' or SLEEP(5) or ' #sqli
                - /bin/cat /etc/passwd; ping 127.0.0.1; curl google.com #os
                - <!ENTITY xxe SYSTEM \"file:///etc/shadow\">]><pwn>&hack;</pwn> #xxe
                - ../../../../etc/passwd #lfi
        response:
          dependent_on_temp_event: valid_request_status
          condition_type: or
          log: WAF detected, Got differenet response from original request status code dependent_on_temp_event[0]['status_code'][0]
          conditions:
            status_code:
              regex: dependent_on_temp_event[0]['status_code'][0]
              reverse: true
            iterative_response_match:
              Wordfence (Defiant):
                response:
                  condition_type: or
                  log: Wordfence (Defiant) Found
                  conditions:
                    content:
                      regex: Generated by Wordfence|broke one of \(the \)?Wordfence \(advanced \)?blocking rules|/plugins/wordfence
                      reverse: false
                    headers:
                      Server:
                        regex: wf[_\-]?WAF
                        reverse: false
              Kona SiteDefender (Akamai):
                response:
                  condition_type: or
                  log: WAF Kona SiteDefender (Akamai) Found
                  conditions:
                    headers:
                      Server:
                        regex: AkamaiGHost
                        reverse: false
